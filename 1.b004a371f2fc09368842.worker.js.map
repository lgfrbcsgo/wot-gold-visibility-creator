{"version":3,"sources":["webpack:///./src/worker/wasm/pkg/gold_visibility_creator_wasm.js"],"names":["__webpack_require__","r","__webpack_exports__","d","create","__wbg_new_59cb74e423758ede","__wbg_stack_558ba5917b466edd","__wbg_error_4bb6c2a97407129a","__wbindgen_object_drop_ref","__wbindgen_throw","_gold_visibility_creator_wasm_bg__WEBPACK_IMPORTED_MODULE_0__","cachegetUint8Memory","getUint8Memory","buffer","wasm","Uint8Array","WASM_VECTOR_LEN","cachedGlobalArgumentPtr","cachegetUint32Memory","getUint32Memory","Uint32Array","red","green","blue","alpha","data","height","width","ptr4","arg","ptr","length","set","passArray8ToWasm","len4","retptr","mem","rustptr","rustlen","realRet","len","subarray","slice","heap","Array","fill","undefined","push","heap_next","getObject","idx","passStringToWasm","cachedTextEncoder","TextEncoder","encodeInto","size","offset","code","charCodeAt","view","written","buf","encode","cachedTextDecoder","TextDecoder","getStringFromWasm","decode","takeObject","ret","dropObject","obj","addHeapObject","Error","arg0","stack","retlen","arg1","varg0","console","error"],"mappings":"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","file":"1.b004a371f2fc09368842.worker.js","sourcesContent":["import * as wasm from './gold_visibility_creator_wasm_bg';\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm(arg) {\n    const ptr = wasm.__wbindgen_malloc(arg.length * 1);\n    getUint8Memory().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction getArrayU8FromWasm(ptr, len) {\n    return getUint8Memory().subarray(ptr / 1, ptr / 1 + len);\n}\n\nlet cachedGlobalArgumentPtr = null;\nfunction globalArgumentPtr() {\n    if (cachedGlobalArgumentPtr === null) {\n        cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();\n    }\n    return cachedGlobalArgumentPtr;\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory;\n}\n/**\n* @param {number} red\n* @param {number} green\n* @param {number} blue\n* @param {number} alpha\n* @param {Uint8Array} data\n* @param {number} height\n* @param {number} width\n* @returns {Uint8Array}\n*/\nexport function create(red, green, blue, alpha, data, height, width) {\n    const ptr4 = passArray8ToWasm(data);\n    const len4 = WASM_VECTOR_LEN;\n    const retptr = globalArgumentPtr();\n    wasm.create(retptr, red, green, blue, alpha, ptr4, len4, height, width);\n    const mem = getUint32Memory();\n    const rustptr = mem[retptr / 4];\n    const rustlen = mem[retptr / 4 + 1];\n\n    const realRet = getArrayU8FromWasm(rustptr, rustlen).slice();\n    wasm.__wbindgen_free(rustptr, rustlen * 1);\n    return realRet;\n\n}\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nlet passStringToWasm;\nif (typeof cachedTextEncoder.encodeInto === 'function') {\n    passStringToWasm = function(arg) {\n\n\n        let size = arg.length;\n        let ptr = wasm.__wbindgen_malloc(size);\n        let offset = 0;\n        {\n            const mem = getUint8Memory();\n            for (; offset < arg.length; offset++) {\n                const code = arg.charCodeAt(offset);\n                if (code > 0x7F) break;\n                mem[ptr + offset] = code;\n            }\n        }\n\n        if (offset !== arg.length) {\n            arg = arg.slice(offset);\n            ptr = wasm.__wbindgen_realloc(ptr, size, size = offset + arg.length * 3);\n            const view = getUint8Memory().subarray(ptr + offset, ptr + size);\n            const ret = cachedTextEncoder.encodeInto(arg, view);\n\n            offset += ret.written;\n        }\n        WASM_VECTOR_LEN = offset;\n        return ptr;\n    };\n} else {\n    passStringToWasm = function(arg) {\n\n\n        let size = arg.length;\n        let ptr = wasm.__wbindgen_malloc(size);\n        let offset = 0;\n        {\n            const mem = getUint8Memory();\n            for (; offset < arg.length; offset++) {\n                const code = arg.charCodeAt(offset);\n                if (code > 0x7F) break;\n                mem[ptr + offset] = code;\n            }\n        }\n\n        if (offset !== arg.length) {\n            const buf = cachedTextEncoder.encode(arg.slice(offset));\n            ptr = wasm.__wbindgen_realloc(ptr, size, size = offset + buf.length);\n            getUint8Memory().set(buf, ptr + offset);\n            offset += buf.length;\n        }\n        WASM_VECTOR_LEN = offset;\n        return ptr;\n    };\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nexport const __wbg_new_59cb74e423758ede = function() {\n    return addHeapObject(new Error());\n};\n\nexport const __wbg_stack_558ba5917b466edd = function(ret, arg0) {\n\n    const retptr = passStringToWasm(getObject(arg0).stack);\n    const retlen = WASM_VECTOR_LEN;\n    const mem = getUint32Memory();\n    mem[ret / 4] = retptr;\n    mem[ret / 4 + 1] = retlen;\n\n};\n\nexport const __wbg_error_4bb6c2a97407129a = function(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n\n    varg0 = varg0.slice();\n    wasm.__wbindgen_free(arg0, arg1 * 1);\n\n    console.error(varg0);\n};\n\nexport const __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n    throw new Error(varg0);\n};\n\n"],"sourceRoot":""}