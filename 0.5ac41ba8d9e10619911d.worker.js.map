{"version":3,"sources":["webpack:///./src/worker/wasm/pkg/gold_visibility_creator_wasm.js"],"names":["__webpack_require__","r","__webpack_exports__","d","encode","decode","RustImageData","__wbg_data_afbd442cdc470da7","__wbg_height_a6c3295fdea676bd","__wbg_width_a54a8b6265ffb03b","__wbindgen_object_drop_ref","__wbg_red_8dd691710d0e658a","__wbg_green_7f75db321ce6b7d7","__wbg_blue_5583a7d18bf501cb","__wbg_alpha_2aa0d5b87dd9b4a7","__wbg_new_59cb74e423758ede","__wbg_stack_558ba5917b466edd","__wbg_error_4bb6c2a97407129a","__wbindgen_throw","_gold_visibility_creator_wasm_bg__WEBPACK_IMPORTED_MODULE_0__","cachegetUint8Memory","getUint8Memory","buffer","wasm","Uint8Array","getArrayU8FromWasm","ptr","len","subarray","cachedGlobalArgumentPtr","globalArgumentPtr","cachegetUint32Memory","getUint32Memory","Uint32Array","heap","Array","fill","undefined","push","heap_next","length","addHeapObject","obj","idx","image_data","color","retptr","mem","rustptr","rustlen","realRet","slice","WASM_VECTOR_LEN","passArray8ToWasm","arg","set","data","ptr0","len0","__wrap","getObject","takeObject","ret","dropObject","passStringToWasm","cachedTextEncoder","TextEncoder","encodeInto","size","offset","code","charCodeAt","view","written","buf","cachedTextDecoder","TextDecoder","getStringFromWasm","[object Object]","Object","create","prototype","free","this","height","width","arg0","retlen","red","green","blue","alpha","Error","stack","arg1","varg0","console","error"],"mappings":"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","file":"0.5ac41ba8d9e10619911d.worker.js","sourcesContent":["import * as wasm from './gold_visibility_creator_wasm_bg';\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nfunction getArrayU8FromWasm(ptr, len) {\n    return getUint8Memory().subarray(ptr / 1, ptr / 1 + len);\n}\n\nlet cachedGlobalArgumentPtr = null;\nfunction globalArgumentPtr() {\n    if (cachedGlobalArgumentPtr === null) {\n        cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();\n    }\n    return cachedGlobalArgumentPtr;\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory;\n}\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n/**\n* @param {any} image_data\n* @param {any} color\n* @returns {Uint8Array}\n*/\nexport function encode(image_data, color) {\n    const retptr = globalArgumentPtr();\n    wasm.encode(retptr, addHeapObject(image_data), addHeapObject(color));\n    const mem = getUint32Memory();\n    const rustptr = mem[retptr / 4];\n    const rustlen = mem[retptr / 4 + 1];\n\n    const realRet = getArrayU8FromWasm(rustptr, rustlen).slice();\n    wasm.__wbindgen_free(rustptr, rustlen * 1);\n    return realRet;\n\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm(arg) {\n    const ptr = wasm.__wbindgen_malloc(arg.length * 1);\n    getUint8Memory().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* @param {Uint8Array} data\n* @returns {RustImageData}\n*/\nexport function decode(data) {\n    const ptr0 = passArray8ToWasm(data);\n    const len0 = WASM_VECTOR_LEN;\n    return RustImageData.__wrap(wasm.decode(ptr0, len0));\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nlet passStringToWasm;\nif (typeof cachedTextEncoder.encodeInto === 'function') {\n    passStringToWasm = function(arg) {\n\n\n        let size = arg.length;\n        let ptr = wasm.__wbindgen_malloc(size);\n        let offset = 0;\n        {\n            const mem = getUint8Memory();\n            for (; offset < arg.length; offset++) {\n                const code = arg.charCodeAt(offset);\n                if (code > 0x7F) break;\n                mem[ptr + offset] = code;\n            }\n        }\n\n        if (offset !== arg.length) {\n            arg = arg.slice(offset);\n            ptr = wasm.__wbindgen_realloc(ptr, size, size = offset + arg.length * 3);\n            const view = getUint8Memory().subarray(ptr + offset, ptr + size);\n            const ret = cachedTextEncoder.encodeInto(arg, view);\n\n            offset += ret.written;\n        }\n        WASM_VECTOR_LEN = offset;\n        return ptr;\n    };\n} else {\n    passStringToWasm = function(arg) {\n\n\n        let size = arg.length;\n        let ptr = wasm.__wbindgen_malloc(size);\n        let offset = 0;\n        {\n            const mem = getUint8Memory();\n            for (; offset < arg.length; offset++) {\n                const code = arg.charCodeAt(offset);\n                if (code > 0x7F) break;\n                mem[ptr + offset] = code;\n            }\n        }\n\n        if (offset !== arg.length) {\n            const buf = cachedTextEncoder.encode(arg.slice(offset));\n            ptr = wasm.__wbindgen_realloc(ptr, size, size = offset + buf.length);\n            getUint8Memory().set(buf, ptr + offset);\n            offset += buf.length;\n        }\n        WASM_VECTOR_LEN = offset;\n        return ptr;\n    };\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n/**\n*/\nexport class RustImageData {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RustImageData.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_rustimagedata_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get height() {\n        return wasm.rustimagedata_height(this.ptr) >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get width() {\n        return wasm.rustimagedata_width(this.ptr) >>> 0;\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    get data() {\n        const retptr = globalArgumentPtr();\n        wasm.rustimagedata_data(retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getArrayU8FromWasm(rustptr, rustlen).slice();\n        wasm.__wbindgen_free(rustptr, rustlen * 1);\n        return realRet;\n\n    }\n}\n\nexport const __wbg_data_afbd442cdc470da7 = function(ret, arg0) {\n\n    const retptr = passArray8ToWasm(getObject(arg0).data);\n    const retlen = WASM_VECTOR_LEN;\n    const mem = getUint32Memory();\n    mem[ret / 4] = retptr;\n    mem[ret / 4 + 1] = retlen;\n\n};\n\nexport const __wbg_height_a6c3295fdea676bd = function(arg0) {\n    return getObject(arg0).height;\n};\n\nexport const __wbg_width_a54a8b6265ffb03b = function(arg0) {\n    return getObject(arg0).width;\n};\n\nexport const __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nexport const __wbg_red_8dd691710d0e658a = function(arg0) {\n    return getObject(arg0).red;\n};\n\nexport const __wbg_green_7f75db321ce6b7d7 = function(arg0) {\n    return getObject(arg0).green;\n};\n\nexport const __wbg_blue_5583a7d18bf501cb = function(arg0) {\n    return getObject(arg0).blue;\n};\n\nexport const __wbg_alpha_2aa0d5b87dd9b4a7 = function(arg0) {\n    return getObject(arg0).alpha;\n};\n\nexport const __wbg_new_59cb74e423758ede = function() {\n    return addHeapObject(new Error());\n};\n\nexport const __wbg_stack_558ba5917b466edd = function(ret, arg0) {\n\n    const retptr = passStringToWasm(getObject(arg0).stack);\n    const retlen = WASM_VECTOR_LEN;\n    const mem = getUint32Memory();\n    mem[ret / 4] = retptr;\n    mem[ret / 4 + 1] = retlen;\n\n};\n\nexport const __wbg_error_4bb6c2a97407129a = function(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n\n    varg0 = varg0.slice();\n    wasm.__wbindgen_free(arg0, arg1 * 1);\n\n    console.error(varg0);\n};\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n    throw new Error(varg0);\n};\n\n"],"sourceRoot":""}