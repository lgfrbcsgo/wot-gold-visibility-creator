{"version":3,"sources":["webpack:///./src/worker/wasm/pkg/gold_visibility_creator_wasm.js"],"names":["__webpack_require__","r","__webpack_exports__","d","create","__wbg_red_8dd691710d0e658a","__wbg_green_7f75db321ce6b7d7","__wbg_blue_5583a7d18bf501cb","__wbg_alpha_2aa0d5b87dd9b4a7","__wbindgen_object_drop_ref","__wbg_new_59cb74e423758ede","__wbg_stack_558ba5917b466edd","__wbg_error_4bb6c2a97407129a","__wbindgen_throw","_gold_visibility_creator_wasm_bg__WEBPACK_IMPORTED_MODULE_0__","heap","Array","fill","undefined","push","heap_next","length","addHeapObject","obj","idx","cachegetUint8Memory","getUint8Memory","buffer","wasm","Uint8Array","WASM_VECTOR_LEN","cachedGlobalArgumentPtr","cachegetUint32Memory","getUint32Memory","Uint32Array","color","data","height","width","ptr1","arg","ptr","set","passArray8ToWasm","len1","retptr","mem","rustptr","rustlen","realRet","len","subarray","slice","getObject","takeObject","ret","dropObject","passStringToWasm","cachedTextEncoder","TextEncoder","encodeInto","size","offset","code","charCodeAt","view","written","buf","encode","cachedTextDecoder","TextDecoder","getStringFromWasm","decode","arg0","red","green","blue","alpha","Error","stack","retlen","arg1","varg0","console","error"],"mappings":"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","file":"1.213f0ae735f05d2fb89e.worker.js","sourcesContent":["import * as wasm from './gold_visibility_creator_wasm_bg';\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm(arg) {\n    const ptr = wasm.__wbindgen_malloc(arg.length * 1);\n    getUint8Memory().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction getArrayU8FromWasm(ptr, len) {\n    return getUint8Memory().subarray(ptr / 1, ptr / 1 + len);\n}\n\nlet cachedGlobalArgumentPtr = null;\nfunction globalArgumentPtr() {\n    if (cachedGlobalArgumentPtr === null) {\n        cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();\n    }\n    return cachedGlobalArgumentPtr;\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory;\n}\n/**\n* @param {any} color\n* @param {Uint8Array} data\n* @param {number} height\n* @param {number} width\n* @returns {Uint8Array}\n*/\nexport function create(color, data, height, width) {\n    const ptr1 = passArray8ToWasm(data);\n    const len1 = WASM_VECTOR_LEN;\n    const retptr = globalArgumentPtr();\n    wasm.create(retptr, addHeapObject(color), ptr1, len1, height, width);\n    const mem = getUint32Memory();\n    const rustptr = mem[retptr / 4];\n    const rustlen = mem[retptr / 4 + 1];\n\n    const realRet = getArrayU8FromWasm(rustptr, rustlen).slice();\n    wasm.__wbindgen_free(rustptr, rustlen * 1);\n    return realRet;\n\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nlet passStringToWasm;\nif (typeof cachedTextEncoder.encodeInto === 'function') {\n    passStringToWasm = function(arg) {\n\n\n        let size = arg.length;\n        let ptr = wasm.__wbindgen_malloc(size);\n        let offset = 0;\n        {\n            const mem = getUint8Memory();\n            for (; offset < arg.length; offset++) {\n                const code = arg.charCodeAt(offset);\n                if (code > 0x7F) break;\n                mem[ptr + offset] = code;\n            }\n        }\n\n        if (offset !== arg.length) {\n            arg = arg.slice(offset);\n            ptr = wasm.__wbindgen_realloc(ptr, size, size = offset + arg.length * 3);\n            const view = getUint8Memory().subarray(ptr + offset, ptr + size);\n            const ret = cachedTextEncoder.encodeInto(arg, view);\n\n            offset += ret.written;\n        }\n        WASM_VECTOR_LEN = offset;\n        return ptr;\n    };\n} else {\n    passStringToWasm = function(arg) {\n\n\n        let size = arg.length;\n        let ptr = wasm.__wbindgen_malloc(size);\n        let offset = 0;\n        {\n            const mem = getUint8Memory();\n            for (; offset < arg.length; offset++) {\n                const code = arg.charCodeAt(offset);\n                if (code > 0x7F) break;\n                mem[ptr + offset] = code;\n            }\n        }\n\n        if (offset !== arg.length) {\n            const buf = cachedTextEncoder.encode(arg.slice(offset));\n            ptr = wasm.__wbindgen_realloc(ptr, size, size = offset + buf.length);\n            getUint8Memory().set(buf, ptr + offset);\n            offset += buf.length;\n        }\n        WASM_VECTOR_LEN = offset;\n        return ptr;\n    };\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nexport const __wbg_red_8dd691710d0e658a = function(arg0) {\n    return getObject(arg0).red;\n};\n\nexport const __wbg_green_7f75db321ce6b7d7 = function(arg0) {\n    return getObject(arg0).green;\n};\n\nexport const __wbg_blue_5583a7d18bf501cb = function(arg0) {\n    return getObject(arg0).blue;\n};\n\nexport const __wbg_alpha_2aa0d5b87dd9b4a7 = function(arg0) {\n    return getObject(arg0).alpha;\n};\n\nexport const __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nexport const __wbg_new_59cb74e423758ede = function() {\n    return addHeapObject(new Error());\n};\n\nexport const __wbg_stack_558ba5917b466edd = function(ret, arg0) {\n\n    const retptr = passStringToWasm(getObject(arg0).stack);\n    const retlen = WASM_VECTOR_LEN;\n    const mem = getUint32Memory();\n    mem[ret / 4] = retptr;\n    mem[ret / 4 + 1] = retlen;\n\n};\n\nexport const __wbg_error_4bb6c2a97407129a = function(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n\n    varg0 = varg0.slice();\n    wasm.__wbindgen_free(arg0, arg1 * 1);\n\n    console.error(varg0);\n};\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n    throw new Error(varg0);\n};\n\n"],"sourceRoot":""}