{"version":3,"sources":["webpack:///./src/worker/wasm/pkg/gold_visibility_creator_wasm.js"],"names":["__webpack_require__","r","__webpack_exports__","d","encode","__wbg_data_afbd442cdc470da7","__wbg_height_a6c3295fdea676bd","__wbg_width_a54a8b6265ffb03b","__wbindgen_object_drop_ref","__wbg_red_8dd691710d0e658a","__wbg_green_7f75db321ce6b7d7","__wbg_blue_5583a7d18bf501cb","__wbg_alpha_2aa0d5b87dd9b4a7","__wbg_new_59cb74e423758ede","__wbg_stack_558ba5917b466edd","__wbg_error_4bb6c2a97407129a","__wbindgen_throw","_gold_visibility_creator_wasm_bg__WEBPACK_IMPORTED_MODULE_0__","heap","Array","fill","undefined","push","heap_next","length","addHeapObject","obj","idx","cachegetUint8Memory","getUint8Memory","buffer","wasm","Uint8Array","cachedGlobalArgumentPtr","cachegetUint32Memory","getUint32Memory","Uint32Array","image_data","color","retptr","mem","rustptr","rustlen","realRet","ptr","len","subarray","slice","getObject","WASM_VECTOR_LEN","takeObject","ret","dropObject","passStringToWasm","cachedTextEncoder","TextEncoder","encodeInto","arg","size","offset","code","charCodeAt","view","written","buf","set","cachedTextDecoder","TextDecoder","getStringFromWasm","decode","arg0","passArray8ToWasm","data","retlen","height","width","red","green","blue","alpha","Error","stack","arg1","varg0","console","error"],"mappings":"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","file":"1.572bf859383d2935a737.worker.js","sourcesContent":["import * as wasm from './gold_visibility_creator_wasm_bg';\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nfunction getArrayU8FromWasm(ptr, len) {\n    return getUint8Memory().subarray(ptr / 1, ptr / 1 + len);\n}\n\nlet cachedGlobalArgumentPtr = null;\nfunction globalArgumentPtr() {\n    if (cachedGlobalArgumentPtr === null) {\n        cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();\n    }\n    return cachedGlobalArgumentPtr;\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory;\n}\n/**\n* @param {any} image_data\n* @param {any} color\n* @returns {Uint8Array}\n*/\nexport function encode(image_data, color) {\n    const retptr = globalArgumentPtr();\n    wasm.encode(retptr, addHeapObject(image_data), addHeapObject(color));\n    const mem = getUint32Memory();\n    const rustptr = mem[retptr / 4];\n    const rustlen = mem[retptr / 4 + 1];\n\n    const realRet = getArrayU8FromWasm(rustptr, rustlen).slice();\n    wasm.__wbindgen_free(rustptr, rustlen * 1);\n    return realRet;\n\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm(arg) {\n    const ptr = wasm.__wbindgen_malloc(arg.length * 1);\n    getUint8Memory().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nlet passStringToWasm;\nif (typeof cachedTextEncoder.encodeInto === 'function') {\n    passStringToWasm = function(arg) {\n\n\n        let size = arg.length;\n        let ptr = wasm.__wbindgen_malloc(size);\n        let offset = 0;\n        {\n            const mem = getUint8Memory();\n            for (; offset < arg.length; offset++) {\n                const code = arg.charCodeAt(offset);\n                if (code > 0x7F) break;\n                mem[ptr + offset] = code;\n            }\n        }\n\n        if (offset !== arg.length) {\n            arg = arg.slice(offset);\n            ptr = wasm.__wbindgen_realloc(ptr, size, size = offset + arg.length * 3);\n            const view = getUint8Memory().subarray(ptr + offset, ptr + size);\n            const ret = cachedTextEncoder.encodeInto(arg, view);\n\n            offset += ret.written;\n        }\n        WASM_VECTOR_LEN = offset;\n        return ptr;\n    };\n} else {\n    passStringToWasm = function(arg) {\n\n\n        let size = arg.length;\n        let ptr = wasm.__wbindgen_malloc(size);\n        let offset = 0;\n        {\n            const mem = getUint8Memory();\n            for (; offset < arg.length; offset++) {\n                const code = arg.charCodeAt(offset);\n                if (code > 0x7F) break;\n                mem[ptr + offset] = code;\n            }\n        }\n\n        if (offset !== arg.length) {\n            const buf = cachedTextEncoder.encode(arg.slice(offset));\n            ptr = wasm.__wbindgen_realloc(ptr, size, size = offset + buf.length);\n            getUint8Memory().set(buf, ptr + offset);\n            offset += buf.length;\n        }\n        WASM_VECTOR_LEN = offset;\n        return ptr;\n    };\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nexport const __wbg_data_afbd442cdc470da7 = function(ret, arg0) {\n\n    const retptr = passArray8ToWasm(getObject(arg0).data);\n    const retlen = WASM_VECTOR_LEN;\n    const mem = getUint32Memory();\n    mem[ret / 4] = retptr;\n    mem[ret / 4 + 1] = retlen;\n\n};\n\nexport const __wbg_height_a6c3295fdea676bd = function(arg0) {\n    return getObject(arg0).height;\n};\n\nexport const __wbg_width_a54a8b6265ffb03b = function(arg0) {\n    return getObject(arg0).width;\n};\n\nexport const __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nexport const __wbg_red_8dd691710d0e658a = function(arg0) {\n    return getObject(arg0).red;\n};\n\nexport const __wbg_green_7f75db321ce6b7d7 = function(arg0) {\n    return getObject(arg0).green;\n};\n\nexport const __wbg_blue_5583a7d18bf501cb = function(arg0) {\n    return getObject(arg0).blue;\n};\n\nexport const __wbg_alpha_2aa0d5b87dd9b4a7 = function(arg0) {\n    return getObject(arg0).alpha;\n};\n\nexport const __wbg_new_59cb74e423758ede = function() {\n    return addHeapObject(new Error());\n};\n\nexport const __wbg_stack_558ba5917b466edd = function(ret, arg0) {\n\n    const retptr = passStringToWasm(getObject(arg0).stack);\n    const retlen = WASM_VECTOR_LEN;\n    const mem = getUint32Memory();\n    mem[ret / 4] = retptr;\n    mem[ret / 4 + 1] = retlen;\n\n};\n\nexport const __wbg_error_4bb6c2a97407129a = function(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n\n    varg0 = varg0.slice();\n    wasm.__wbindgen_free(arg0, arg1 * 1);\n\n    console.error(varg0);\n};\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n    throw new Error(varg0);\n};\n\n"],"sourceRoot":""}